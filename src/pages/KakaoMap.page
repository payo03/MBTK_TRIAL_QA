<!--
 * @author : th.kim
 * @date : 2024-11-07
 * @description : 
 * @target : 
==============================================================
 * Ver          Date            Author          Modification
 * 1.0          2024-11-07      th.kim          Created
 * 1.1          2024-11-21      jh.jung         인포메이션 이벤트 변경, 지도 초기값 수정
-->
<apex:page id="KakaoMap">

	<!-- Head Start -->
	<head>
		<title>리드 맵</title>
<!--		<script type="text/javascript" src="{!URLFOR($Resource.kakaoMap)}"></script>-->
		<script type="text/javascript" src="https://dapi.kakao.com/v2/maps/sdk.js?appkey={!$Label.KakaoMapAppKey}&libraries=services"></script>
		<style>

			html {
				overflow: hidden;
				height: 100%;
			}

			html body.sfdcBody {
				padding: 0;
				height: 100%;
			}

			.map {
				width: 100%;
				height: 100%;
				border-radius: 0.5rem;
			}

			@media screen and (max-width: 540px) {
				.map {
					width: 100%;
					height: 300px;
				}
			}
		</style>
	</head>
	<!-- Head End -->

	<!-- Body Start -->
	<body>

		<!-- 지도를 표시할 div -->
		<div id="map" class="map"></div>

		<script>

			// Lighting URL
			const lightningHost = "{!$Label.LightningHost}";
			// 마커할 리스트
			const listMarker = [];
			// 카카오맵 객체
			let map;
			// 지오코더 객체
			let geocoder;

			const infowindowArray = [];

			// let mapMeanY = 0;
			// let mapMeanX = 0;

			window.addEventListener('message', function(e) {

				// origin, target 검증
				if (lightningHost !== e.origin || e.data.target !== 'kakaoMap') return;

				if (e.data.formFactor !== 'Large' && window.location.href.includes('visual.force.com')) {
					window.location.href = '/one/one.app#' + window.location.pathname;
				}
				initializeMap(e.data.leadList);
			});

			// 카카오맵 생성 함수
			function initializeMap(leadList) {

				// 기존 지도 DOM 초기화
				const mapContainer = document.getElementById('map');
				mapContainer.innerHTML = '';

				// 마커 없을 때 초기맵 : 서울시청
				const mapOption = {
					center: new kakao.maps.LatLng(37.566826004661, 126.978652258309),
					level: 9
				};

				// 지도와 지오코더 객체를 한 번만 생성
				map = new kakao.maps.Map(mapContainer, mapOption);
				// geocoder = new kakao.maps.services.Geocoder();

				// LatLngBounds 객체 생성
				var bounds = new kakao.maps.LatLngBounds();

				const markerExistLead = leadList.filter(lead => lead.Latitude__c);
				console.log('markerExistLead ::: ' + markerExistLead)
				// 리스트에 있는 모든 리드의 주소를 반복하여 마커 추가
				markerExistLead.forEach(el => {
					addMarker(el, markerExistLead.length);
					bounds.extend(new kakao.maps.LatLng(el.Latitude__c, el.Longitude__c));
				});
				console.log('bounds ::: ' + bounds);
				if(!bounds.isEmpty()) {
					map.setBounds(bounds);
					const currentLevel = map.getLevel();
					map.setLevel(currentLevel, { animate: true });
				} else {
					map.setCenter(new kakao.maps.LatLng(37.566826004661, 126.978652258309));
					map.setLevel(9, { animate: true });
				}
			}

			// 주소를 좌표로 변환하고, 마커와 인포윈도우를 생성하는 함수
			function addMarker(lead, leadLength) {
				console.log('marker lead ::: ' + lead)
				// 제거 예정
				// geocoder.addressSearch(lead.RoadAddress__c, function(result, status) {
				// 	if (status === kakao.maps.services.Status.OK) {
				// 		const coords = new kakao.maps.LatLng(result[0].y, result[0].x);
				// 	}
				// });
				const coords = new kakao.maps.LatLng(lead.Latitude__c, lead.Longitude__c);

				// 마커 생성 및 추가
				const marker = new kakao.maps.Marker({
					map: map,
					position: coords,
					clickable: true
				});

				// 인포윈도우 설정 및 표시
				const infowindow = new kakao.maps.InfoWindow({
					// 링크 다시
					content: `<div style="width:150px;text-align:center;padding:6px 0;"><a href="/lightning/r/Lead/${lead.Id}/view" target="_blank">${lead.Name}</a></div>`
				});

				infowindowArray.push(infowindow);

				// 마커에 마우스오버 이벤트를 등록
				kakao.maps.event.addListener(marker, 'mouseover', function() {
					for (info of infowindowArray) {
						info.close();
					}
					infowindow.open(map, marker);
				});
				// kakao.maps.event.addListener(marker, 'mouseover', infowindow);

				// 마커에 마우스아웃 이벤트를 등록
				// kakao.maps.event.addListener(marker, 'mouseout', function() {
				// 	infowindow.close();
				// });

				// 마커에 클릭 이벤트를 등록
				kakao.maps.event.addListener(marker, 'click', function() {
					postToParent(lead);
				});

				// 생성된 마커를 배열에 추가
				listMarker.push(marker);

				// mapMeanY += parseFloat(lead.Latitude__c);
				// mapMeanX += parseFloat(lead.Longitude__c);

				// 지도 중심 마커 좌표 평균으로 이동
				// const mapCenter = new kakao.maps.LatLng(mapMeanY/leadLength, mapMeanX/leadLength);
				// map.setCenter(mapCenter);

				// 지도 중심을 마지막 마커 위치로 이동
				// map.setCenter(coords);
			}

			// LWC로 데이터 전송
			function postToParent(data) {
				console.log('data :: ', data);
				data.target = 'kakaoMap';
				parent.postMessage(data, lightningHost);
			}

		</script>
	</body>
	<!-- Body End -->
</apex:page>